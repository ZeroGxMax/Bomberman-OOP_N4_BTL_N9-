Index: src/entities/animate/mob/enemy/Oneal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities.animate.mob.enemy;\r\n\r\nimport entities.Entity;\r\nimport entities.animate.AnimateEntity;\r\nimport graphics.Sprite;\r\nimport javafx.scene.image.Image;\r\n\r\npublic class Oneal extends Enemy {\r\n    public Oneal(double x, double y, Sprite sprite) {\r\n        super(x, y, sprite);\r\n    }\r\n\r\n    public void chooseSprite() {\r\n        switch (direction) {\r\n            case UP:\r\n            case RIGHT:\r\n                sprite = Sprite.movingSprite(Sprite.oneal_right[0], Sprite.oneal_right[1],\r\n                        Sprite.oneal_right[2], animate, 60);\r\n                img = sprite.getFxImage();\r\n                break;\r\n            case DOWN:\r\n            case LEFT:\r\n                sprite = Sprite.movingSprite(Sprite.oneal_left[0], Sprite.oneal_left[1],\r\n                        Sprite.oneal_left[2], animate, 60);\r\n                img = sprite.getFxImage();\r\n                break;\r\n            case NONE:\r\n                break;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/animate/mob/enemy/Oneal.java b/src/entities/animate/mob/enemy/Oneal.java
--- a/src/entities/animate/mob/enemy/Oneal.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/animate/mob/enemy/Oneal.java	(date 1665159938866)
@@ -1,13 +1,83 @@
 package entities.animate.mob.enemy;
 
+import constants.Constants.DIRECTION;
 import entities.Entity;
 import entities.animate.AnimateEntity;
+import entities.animate.mob.Bomber;
 import graphics.Sprite;
 import javafx.scene.image.Image;
+import map.Map;
+import tracing.DirectedTracing;
+import tracing.RandomTracing;
 
 public class Oneal extends Enemy {
+    public DirectedTracing tracing = new DirectedTracing(this);
+
     public Oneal(double x, double y, Sprite sprite) {
         super(x, y, sprite);
+        tracing.setBomber(gameMap.getBomber());
+    }
+
+    /**
+     * Dựa vào tracing để xác định ví trí di chuyển
+     * Dựa theo direction để thay đổi tọa độ
+     */
+    @Override
+    protected void calculateMove() {
+        tracing.setBomber(gameMap.getBomber());
+        if (!moving) {
+            direction = DIRECTION.NONE;
+        }
+        // Call parent's method
+        super.calculateMove();
+    }
+
+    @Override
+    public void setDirection() {
+        tracing.setBomber(gameMap.getBomber());
+        if (!isCanChangeDirection()) {
+            return;
+        }
+
+        int randomNumber = tracing.random.nextInt();
+
+        direction = tracing.calculateDirection();
+
+        // Depend on direction determine if it can still move:
+        moving = true;
+        switch (direction) {
+            case UP:
+                if (Map.isCanStepOn(xUnit, yUnit - 1)) {
+                    yUnit--;
+                } else {
+                    moving = false;
+                }
+                break;
+            case DOWN:
+                if (Map.isCanStepOn(xUnit, yUnit + 1)) {
+                    yUnit++;
+                } else {
+                    moving = false;
+                }
+                break;
+            case LEFT:
+                if (Map.isCanStepOn(xUnit - 1, yUnit)) {
+                    xUnit--;
+                } else {
+                    moving = false;
+                }
+                break;
+            case RIGHT:
+                if (Map.isCanStepOn(xUnit + 1, yUnit)) {
+                    xUnit++;
+                } else {
+                    moving = false;
+                }
+                break;
+            default:
+                moving = false;
+                break;
+        }
     }
 
     public void chooseSprite() {
Index: src/map/Map.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package map;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport constants.Constants;\r\nimport entities.animate.AnimateEntity;\r\nimport entities.Entity;\r\nimport entities.still.Grass;\r\nimport entities.still.Wall;\r\nimport factory.*;\r\nimport graphics.Sprite;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\nimport javafx.scene.canvas.GraphicsContext;\r\n\r\npublic class Map {\r\n    public static final int WIDTH = Constants.WIDTH;\r\n    public static final int HEIGHT = Constants.HEIGHT;\r\n    private List<Entity> animateEntities = new ArrayList<>();\r\n    private static int width;\r\n    private static int[][] _map;\r\n    private int level;\r\n    private List<Entity> stillObjects = new ArrayList<>();\r\n    private static int height;\r\n\r\n    public int getLevel() {\r\n        return level;\r\n    }\r\n\r\n    public int getWidth() {\r\n        return width;\r\n    }\r\n\r\n    public int getHeight() {\r\n        return height;\r\n    }\r\n\r\n    /**\r\n     * Kiểm tra ô có tọa độ (x, y) trong bản đồ bomber có thể đi vào được không.\r\n     *\r\n     * @param x Tọa độ theo chiều ngang, hướng trái -> phải, bắt đầu từ 0\r\n     * @param y Tọa độ theo chiều dọc, hướng từ trên -> dưới, bắt đầu từ 0\r\n     * @return Khả năng đi vào ô (x, y)\r\n     */\r\n    public static boolean isCanStepOn(int x, int y) {\r\n        // Kiểm tra tọa độ có trong map không\r\n        if (x < 0 || y < 0 || x >= width || y >= height)\r\n            return false;\r\n        return _map[y][x] == 1 ? true : false;\r\n    }\r\n\r\n    public void createMap(String mapPath) throws FileNotFoundException {\r\n        Scanner sc = new Scanner(new File(mapPath));\r\n        level = sc.nextInt();\r\n        height = sc.nextInt();\r\n        width = sc.nextInt();\r\n        _map = new int[height][width];\r\n\r\n        sc.nextLine();\r\n\r\n        for (int i = 0; i < height; i++) {\r\n            String str = sc.nextLine();\r\n            for (int j = 0; j < width; j++) {\r\n                char c = str.charAt(j);\r\n                Entity temp = StillFactory.getStillEntity(i, j, c);\r\n                stillObjects.add(temp);\r\n                _map[i][j] = Grass.isGrass(temp) ? 1 : 0;\r\n                Entity animateOne = AnimateFactory.getAnimateEntity(i, j, c);\r\n                if (animateOne != null) {\r\n                    animateEntities.add(animateOne);\r\n                }\r\n            }\r\n        }\r\n        sc.close();\r\n    }\r\n\r\n    public void updateMap() {\r\n        animateEntities.forEach(Entity::update);\r\n    }\r\n\r\n    public void renderMap(GraphicsContext gc) {\r\n        gc.clearRect(0, 0, WIDTH, HEIGHT);\r\n        stillObjects.forEach(stillObjects -> stillObjects.render(gc));\r\n        animateEntities.forEach(animateEntities -> animateEntities.render(gc));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/map/Map.java b/src/map/Map.java
--- a/src/map/Map.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/map/Map.java	(date 1665160131717)
@@ -6,6 +6,7 @@
 import constants.Constants;
 import entities.animate.AnimateEntity;
 import entities.Entity;
+import entities.animate.mob.Bomber;
 import entities.still.Grass;
 import entities.still.Wall;
 import factory.*;
@@ -20,7 +21,7 @@
 public class Map {
     public static final int WIDTH = Constants.WIDTH;
     public static final int HEIGHT = Constants.HEIGHT;
-    private List<Entity> animateEntities = new ArrayList<>();
+    public List<Entity> animateEntities = new ArrayList<>();
     private static int width;
     private static int[][] _map;
     private int level;
@@ -75,10 +76,24 @@
                 }
             }
         }
+        // Lưu ý: Phải setGameMap ở bên ngoài (không thể construct trực tiếp).
+        updateMap();
         sc.close();
     }
 
+    public Bomber getBomber() {
+        for (int i = 0; i < animateEntities.size(); i++) {
+            if (animateEntities.get(i).isBomber == true) {
+                return (Bomber) animateEntities.get(i);
+            }
+        }
+        return null;
+    }
+
     public void updateMap() {
+        for (int i = 0; i < animateEntities.size(); i++) {
+            animateEntities.get(i).setGameMap(this);
+        }
         animateEntities.forEach(Entity::update);
     }
 
Index: src/entities/animate/mob/Bomber.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities.animate.mob;\r\n\r\nimport constants.Constants;\r\nimport constants.Constants.DIRECTION;\r\nimport constants.Constants.KEYBOARD;\r\nimport graphics.Sprite;\r\nimport input.KeyBoardInput;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport map.Map;\r\n\r\npublic class Bomber extends Mob {\r\n    public Bomber(double x, double y, Sprite sprite) {\r\n        super(x, y, sprite);\r\n    }\r\n\r\n    @Override\r\n    public void move(double xa, double ya) {\r\n        x += xa;\r\n        y += ya;\r\n    }\r\n\r\n    /**\r\n     * Lấy key input để set hướng cho nhân vật, cập nhật trạng thái di chuyển trong\r\n     * biến moving.\r\n     */\r\n\r\n    @Override\r\n    public void setDirection() {\r\n        if (!isCanChangeDirection()) {\r\n            return;\r\n        }\r\n        // Lấy input\r\n        Constants.KEYBOARD temp = KeyBoardInput.getInput();\r\n        // Update direction and moving\r\n        moving = true;\r\n        switch (temp) {\r\n            case UP:\r\n                direction = DIRECTION.UP;\r\n                if (Map.isCanStepOn(xUnit, yUnit - 1))\r\n                    yUnit--;\r\n                else\r\n                    moving = false;\r\n                break;\r\n            case DOWN:\r\n                direction = DIRECTION.DOWN;\r\n                if (Map.isCanStepOn(xUnit, yUnit + 1))\r\n                    yUnit++;\r\n                else\r\n                    moving = false;\r\n                break;\r\n            case LEFT:\r\n                direction = DIRECTION.LEFT;\r\n                if (Map.isCanStepOn(xUnit - 1, yUnit))\r\n                    xUnit--;\r\n                else\r\n                    moving = false;\r\n                break;\r\n            case RIGHT:\r\n                direction = DIRECTION.RIGHT;\r\n                if (Map.isCanStepOn(xUnit + 1, yUnit))\r\n                    xUnit++;\r\n                else\r\n                    moving = false;\r\n                break;\r\n            default:\r\n                direction = DIRECTION.NONE;\r\n                moving = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void calculateMove() {\r\n        if (!moving) // Nếu không di chuyển -> thoát hàm\r\n            return;\r\n        double xa = 0;\r\n        double ya = 0;\r\n        if (direction == DIRECTION.UP)\r\n            ya -= 1.75;\r\n        if (direction == DIRECTION.DOWN)\r\n            ya += 1.75;\r\n        if (direction == DIRECTION.RIGHT)\r\n            xa += 1.75;\r\n        if (direction == DIRECTION.LEFT)\r\n            xa -= 1.75;\r\n        move(xa, ya);\r\n    }\r\n\r\n    @Override\r\n    public void render(GraphicsContext gc) {\r\n        chooseSprite();\r\n        gc.drawImage(sprite.getFxImage(), x, y);\r\n    }\r\n\r\n    public void chooseSprite() {\r\n        switch (direction) {\r\n            case UP:\r\n                sprite = Sprite.movingSprite(Sprite.player_up[0], Sprite.player_up[1],\r\n                        Sprite.player_up[2], animate, 40);\r\n                break;\r\n            case RIGHT:\r\n                sprite = Sprite.movingSprite(Sprite.player_right[0], Sprite.player_right[1],\r\n                        Sprite.player_right[2], animate, 40);\r\n                break;\r\n            case DOWN:\r\n                sprite = Sprite.movingSprite(Sprite.player_down[0], Sprite.player_down[1],\r\n                        Sprite.player_down[2], animate, 40);\r\n                break;\r\n            case LEFT:\r\n                sprite = Sprite.movingSprite(Sprite.player_left[0], Sprite.player_left[1],\r\n                        Sprite.player_left[2], animate, 40);\r\n                break;\r\n            case NONE:\r\n                sprite = Sprite.player_down[0];\r\n                break;\r\n        }\r\n        img = sprite.getFxImage();\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        setDirection();\r\n        calculateMove();\r\n        goAnimate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/animate/mob/Bomber.java b/src/entities/animate/mob/Bomber.java
--- a/src/entities/animate/mob/Bomber.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/animate/mob/Bomber.java	(date 1665160177716)
@@ -9,8 +9,13 @@
 import map.Map;
 
 public class Bomber extends Mob {
+
+    public Bomber() {}
+
     public Bomber(double x, double y, Sprite sprite) {
         super(x, y, sprite);
+        velocity = 1.75;
+        isBomber = true;
     }
 
     @Override
@@ -76,13 +81,13 @@
         double xa = 0;
         double ya = 0;
         if (direction == DIRECTION.UP)
-            ya -= 1.75;
+            ya -= velocity;
         if (direction == DIRECTION.DOWN)
-            ya += 1.75;
+            ya += velocity;
         if (direction == DIRECTION.RIGHT)
-            xa += 1.75;
+            xa += velocity;
         if (direction == DIRECTION.LEFT)
-            xa -= 1.75;
+            xa -= velocity;
         move(xa, ya);
     }
 
Index: src/entities/animate/AnimateEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities.animate;\r\n\r\nimport entities.Entity;\r\nimport graphics.Sprite;\r\nimport javafx.util.Pair;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport javafx.scene.SnapshotParameters;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.paint.Color;\r\n\r\nimport java.awt.font.ImageGraphicAttribute;\r\n\r\npublic abstract class AnimateEntity extends Entity {\r\n    protected int animate = 0;\r\n    protected int MAX_ANIMATE = 1000;\r\n\r\n    public AnimateEntity(double x, double y, Sprite sprite) {\r\n        super(x, y, sprite);\r\n    }\r\n\r\n    protected void goAnimate() {\r\n        if (animate < MAX_ANIMATE) {\r\n            animate++;\r\n        } else {\r\n            animate = 0;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/animate/AnimateEntity.java b/src/entities/animate/AnimateEntity.java
--- a/src/entities/animate/AnimateEntity.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/animate/AnimateEntity.java	(date 1665157898227)
@@ -2,26 +2,19 @@
 
 import entities.Entity;
 import graphics.Sprite;
-import javafx.util.Pair;
-
-import java.util.ArrayList;
-
-import javafx.scene.SnapshotParameters;
-import javafx.scene.canvas.GraphicsContext;
-import javafx.scene.image.Image;
-import javafx.scene.image.ImageView;
-import javafx.scene.paint.Color;
-
-import java.awt.font.ImageGraphicAttribute;
+import map.Map;
 
 public abstract class AnimateEntity extends Entity {
     protected int animate = 0;
     protected int MAX_ANIMATE = 1000;
 
+    public AnimateEntity() {}
+
     public AnimateEntity(double x, double y, Sprite sprite) {
         super(x, y, sprite);
     }
 
+
     protected void goAnimate() {
         if (animate < MAX_ANIMATE) {
             animate++;
Index: src/tracing/RandomTracing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tracing;\r\n\r\nimport constants.Constants.DIRECTION;\r\n\r\nimport java.util.Random;\r\n\r\npublic class RandomTracing extends Tracing {\r\n    public static final int TIME_EACH_DIRECTION_MAX = 10;\r\n    public static Random random = new Random();\r\n    public int timeEachDirection = random.nextInt(10); // Some overhead before first moving\r\n\r\n    @Override\r\n    public DIRECTION calculateDirection() {\r\n        int randomNumber = random.nextInt() % 4;\r\n        switch (randomNumber) {\r\n            case 0:\r\n                return DIRECTION.UP;\r\n            case 1:\r\n                return DIRECTION.RIGHT;\r\n            case 2:\r\n                return DIRECTION.DOWN;\r\n            case 3:\r\n                return DIRECTION.LEFT;\r\n            default:\r\n                return DIRECTION.NONE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enemy will change to adjacent side instead of random.\r\n     */\r\n    public DIRECTION toAdjacentDirection(DIRECTION direction) {\r\n        int randomNumber = random.nextInt() % 2;\r\n        if (direction == DIRECTION.UP || direction == DIRECTION.DOWN) {\r\n            switch (randomNumber) {\r\n                case 0:\r\n                    return DIRECTION.RIGHT;\r\n                case 1:\r\n                    return DIRECTION.LEFT;\r\n                default:\r\n                    return DIRECTION.NONE;\r\n            }\r\n        }\r\n        if (direction == DIRECTION.LEFT || direction == DIRECTION.RIGHT) {\r\n            switch (randomNumber) {\r\n                case 0:\r\n                    return DIRECTION.UP;\r\n                case 1:\r\n                    return DIRECTION.DOWN;\r\n                default:\r\n                    return DIRECTION.NONE;\r\n            }\r\n        }\r\n        return DIRECTION.LEFT;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tracing/RandomTracing.java b/src/tracing/RandomTracing.java
--- a/src/tracing/RandomTracing.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/tracing/RandomTracing.java	(date 1665153719826)
@@ -5,9 +5,8 @@
 import java.util.Random;
 
 public class RandomTracing extends Tracing {
-    public static final int TIME_EACH_DIRECTION_MAX = 10;
-    public static Random random = new Random();
-    public int timeEachDirection = random.nextInt(10); // Some overhead before first moving
+    public static final int TIME_EACH_DIRECTION_MAX = 100;
+    public int timeEachDirection = 95; // Some overhead before first moving
 
     @Override
     public DIRECTION calculateDirection() {
@@ -40,8 +39,7 @@
                 default:
                     return DIRECTION.NONE;
             }
-        }
-        if (direction == DIRECTION.LEFT || direction == DIRECTION.RIGHT) {
+        } else {
             switch (randomNumber) {
                 case 0:
                     return DIRECTION.UP;
@@ -51,6 +49,5 @@
                     return DIRECTION.NONE;
             }
         }
-        return DIRECTION.LEFT;
     }
 }
Index: src/entities/animate/mob/enemy/Enemy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities.animate.mob.enemy;\r\n\r\nimport constants.Constants;\r\nimport constants.Constants.DIRECTION;\r\nimport entities.Entity;\r\nimport input.KeyBoardInput;\r\nimport tracing.RandomTracing;\r\nimport entities.animate.mob.Mob;\r\nimport graphics.Sprite;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport map.Map;\r\nimport support.Unit;\r\nimport tracing.Tracing;\r\n\r\npublic abstract class Enemy extends Mob {\r\n    public RandomTracing tracing = new RandomTracing();\r\n\r\n    public Enemy(double x, double y, Sprite sprite) {\r\n        super(x, y, sprite);\r\n    }\r\n\r\n    @Override\r\n    public void render(GraphicsContext gc) {\r\n        chooseSprite();\r\n        gc.drawImage(sprite.getFxImage(), x, y);\r\n    }\r\n\r\n    /**\r\n     * Dựa vào tracing để xác định ví trí di chuyển\r\n     * Dựa theo direction để thay đổi tọa độ\r\n     */\r\n    @Override\r\n    protected void calculateMove() {\r\n        double xa = 0;\r\n        double ya = 0;\r\n\r\n\r\n        if (tracing.timeEachDirection >= tracing.TIME_EACH_DIRECTION_MAX\r\n                && isCanChangeDirection()) {\r\n            direction = tracing.calculateDirection();\r\n            tracing.timeEachDirection = 0;\r\n        } else {\r\n            // If the enemy hit the wall, change it direction.\r\n            if (!moving) {\r\n                direction = tracing.calculateDirection();\r\n            }\r\n            tracing.timeEachDirection++;\r\n        }\r\n\r\n        if (direction == DIRECTION.UP) ya -= 0.5;\r\n        if (direction == DIRECTION.DOWN) ya += 0.5;\r\n        if (direction == DIRECTION.RIGHT) xa += 0.5;\r\n        if (direction == DIRECTION.LEFT) xa -= 0.5;\r\n\r\n        move(xa, ya);\r\n    }\r\n\r\n    public void move(double xa, double ya) {\r\n        x += xa;\r\n        y += ya;\r\n    }\r\n\r\n    @Override\r\n    public void setDirection() {\r\n        if (!isCanChangeDirection()) {\r\n            return;\r\n        }\r\n\r\n        int randomNumber = tracing.random.nextInt();\r\n\r\n        if (randomNumber % 4 == 0) {\r\n            direction = tracing.calculateDirection();\r\n        }\r\n\r\n        // Depend on direction determine if it can still move:\r\n        moving = true;\r\n        switch (direction) {\r\n            case UP:\r\n                if (Map.isCanStepOn(xUnit, yUnit - 1)) {\r\n                    yUnit--;\r\n                } else {\r\n                    moving = false;\r\n                }\r\n                break;\r\n            case DOWN:\r\n                if (Map.isCanStepOn(xUnit, yUnit + 1)) {\r\n                    yUnit++;\r\n                } else {\r\n                    moving = false;\r\n                }\r\n                break;\r\n            case LEFT:\r\n                if (Map.isCanStepOn(xUnit - 1, yUnit)) {\r\n                    xUnit--;\r\n                } else {\r\n                    moving = false;\r\n                }\r\n                break;\r\n            case RIGHT:\r\n                if (Map.isCanStepOn(xUnit + 1, yUnit)) {\r\n                    xUnit++;\r\n                } else {\r\n                    moving = false;\r\n                }\r\n                break;\r\n            default:\r\n                moving = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        setDirection();\r\n        goAnimate();\r\n        calculateMove();\r\n    }\r\n\r\n    public abstract void chooseSprite();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/animate/mob/enemy/Enemy.java b/src/entities/animate/mob/enemy/Enemy.java
--- a/src/entities/animate/mob/enemy/Enemy.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/animate/mob/enemy/Enemy.java	(date 1665159373823)
@@ -13,16 +13,10 @@
 import tracing.Tracing;
 
 public abstract class Enemy extends Mob {
-    public RandomTracing tracing = new RandomTracing();
 
     public Enemy(double x, double y, Sprite sprite) {
         super(x, y, sprite);
-    }
-
-    @Override
-    public void render(GraphicsContext gc) {
-        chooseSprite();
-        gc.drawImage(sprite.getFxImage(), x, y);
+        velocity = 0.5;
     }
 
     /**
@@ -34,23 +28,10 @@
         double xa = 0;
         double ya = 0;
 
-
-        if (tracing.timeEachDirection >= tracing.TIME_EACH_DIRECTION_MAX
-                && isCanChangeDirection()) {
-            direction = tracing.calculateDirection();
-            tracing.timeEachDirection = 0;
-        } else {
-            // If the enemy hit the wall, change it direction.
-            if (!moving) {
-                direction = tracing.calculateDirection();
-            }
-            tracing.timeEachDirection++;
-        }
-
-        if (direction == DIRECTION.UP) ya -= 0.5;
-        if (direction == DIRECTION.DOWN) ya += 0.5;
-        if (direction == DIRECTION.RIGHT) xa += 0.5;
-        if (direction == DIRECTION.LEFT) xa -= 0.5;
+        if (direction == Constants.DIRECTION.UP) ya -= velocity;
+        if (direction == Constants.DIRECTION.DOWN) ya += velocity;
+        if (direction == Constants.DIRECTION.RIGHT) xa += velocity;
+        if (direction == Constants.DIRECTION.LEFT) xa -= velocity;
 
         move(xa, ya);
     }
@@ -60,55 +41,6 @@
         y += ya;
     }
 
-    @Override
-    public void setDirection() {
-        if (!isCanChangeDirection()) {
-            return;
-        }
-
-        int randomNumber = tracing.random.nextInt();
-
-        if (randomNumber % 4 == 0) {
-            direction = tracing.calculateDirection();
-        }
-
-        // Depend on direction determine if it can still move:
-        moving = true;
-        switch (direction) {
-            case UP:
-                if (Map.isCanStepOn(xUnit, yUnit - 1)) {
-                    yUnit--;
-                } else {
-                    moving = false;
-                }
-                break;
-            case DOWN:
-                if (Map.isCanStepOn(xUnit, yUnit + 1)) {
-                    yUnit++;
-                } else {
-                    moving = false;
-                }
-                break;
-            case LEFT:
-                if (Map.isCanStepOn(xUnit - 1, yUnit)) {
-                    xUnit--;
-                } else {
-                    moving = false;
-                }
-                break;
-            case RIGHT:
-                if (Map.isCanStepOn(xUnit + 1, yUnit)) {
-                    xUnit++;
-                } else {
-                    moving = false;
-                }
-                break;
-            default:
-                moving = false;
-                break;
-        }
-    }
-
     @Override
     public void update() {
         setDirection();
@@ -116,5 +48,11 @@
         calculateMove();
     }
 
+    @Override
+    public void render(GraphicsContext gc) {
+        chooseSprite();
+        gc.drawImage(sprite.getFxImage(), x, y);
+    }
+
     public abstract void chooseSprite();
 }
Index: src/tracing/Tracing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tracing;\r\n\r\nimport constants.Constants.DIRECTION;\r\n\r\nimport java.util.Random;\r\n\r\npublic abstract class Tracing {\r\n\r\n    public abstract DIRECTION calculateDirection();\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tracing/Tracing.java b/src/tracing/Tracing.java
--- a/src/tracing/Tracing.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/tracing/Tracing.java	(date 1665153719837)
@@ -5,6 +5,7 @@
 import java.util.Random;
 
 public abstract class Tracing {
+    public static Random random = new Random();
 
     public abstract DIRECTION calculateDirection();
 
Index: src/entities/animate/mob/Mob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities.animate.mob;\r\n\r\nimport graphics.Sprite;\r\nimport entities.still.Grass;\r\nimport entities.still.StillObject;\r\nimport entities.animate.AnimateEntity;\r\nimport constants.Constants.DIRECTION;\r\nimport javafx.util.Pair;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic abstract class Mob extends AnimateEntity {\r\n    protected DIRECTION direction = DIRECTION.NONE;\r\n    protected boolean moving = false;\r\n\r\n    public Mob(double x, double y, Sprite sprite) {\r\n        super(x, y, sprite);\r\n    }\r\n\r\n    public boolean isMoving() {\r\n        return moving;\r\n    }\r\n\r\n    public DIRECTION getDirection() {\r\n        return direction;\r\n    }\r\n\r\n    /**\r\n     * Kiểm tra xem có thể chuyền hướng không. Nhân vật chỉ có thể chuyển hướng khi\r\n     * đã đi đến đúng ô.\r\n     *\r\n     * @return\r\n     */\r\n\r\n\r\n    protected boolean isCanChangeDirection() {\r\n        // Kiểm tra bomber đã đúng ô chưa. Nếu cách 1 pixel coi như đã đúng vị trí (giá\r\n        // trị 1 có thể thay đổi cho phù hợp).\r\n        if (Math.abs(xUnit * Sprite.SCALED_SIZE - x) > 1.75) {\r\n            return false;\r\n        }\r\n        if (Math.abs(yUnit * Sprite.SCALED_SIZE - y) > 1.75) {\r\n            return false;\r\n        }\r\n        // Cài đặt lại vị trí nhân vật\r\n        x = xUnit * Sprite.SCALED_SIZE;\r\n        y = yUnit * Sprite.SCALED_SIZE;\r\n        return true;\r\n    }\r\n\r\n    protected abstract void calculateMove();\r\n\r\n    protected abstract void move(double xa, double ya);\r\n\r\n    public abstract void setDirection();\r\n\r\n//    protected abstract void canMove(double x, double y);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/animate/mob/Mob.java b/src/entities/animate/mob/Mob.java
--- a/src/entities/animate/mob/Mob.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/animate/mob/Mob.java	(date 1665159289690)
@@ -8,10 +8,14 @@
 import javafx.util.Pair;
 
 import java.util.ArrayList;
+import map.Map;
 
 public abstract class Mob extends AnimateEntity {
     protected DIRECTION direction = DIRECTION.NONE;
     protected boolean moving = false;
+    protected double velocity;
+
+    public Mob() {}
 
     public Mob(double x, double y, Sprite sprite) {
         super(x, y, sprite);
Index: src/entities/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities;\r\n\r\nimport javafx.geometry.Rectangle2D;\r\nimport javafx.scene.SnapshotParameters;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.image.Image;\r\nimport support.Unit;\r\nimport graphics.Sprite;\r\nimport map.Map;\r\nimport constants.Constants;\r\n\r\npublic abstract class Entity {\r\n    protected static Map gameMap;\r\n    //Tọa độ X tính từ góc trái trên trong Canvas\r\n    protected double x;\r\n    //Tọa độ Y tính từ góc trái trên trong Canvas\r\n    protected double y;\r\n    // Tọa độ ô trong board\r\n    protected int xUnit;\r\n    protected int yUnit;\r\n    protected Sprite sprite;\r\n    protected Image img;\r\n    protected boolean canBlock = false;\r\n\r\n    //Khởi tạo đối tượng, chuyển từ tọa độ đơn vị sang tọa độ trong canvas\r\n    public Entity(double xUnit, double yUnit, Sprite sprite) {\r\n        this.xUnit = (int) xUnit;\r\n        this.yUnit = (int) yUnit;\r\n        this.x = Unit.unitToCoordinate(xUnit);\r\n        this.y = Unit.unitToCoordinate(yUnit);\r\n        this.sprite = sprite;\r\n        this.img = sprite.getFxImage();\r\n    }\r\n\r\n    public double getX() {\r\n        return x;\r\n    }\r\n\r\n    public double getY() {\r\n        return y;\r\n    }\r\n\r\n    public Sprite getSprite() {\r\n        return sprite;\r\n    }\r\n\r\n    public Rectangle2D getBoundary() {\r\n        return new Rectangle2D(x, y, Sprite.SCALED_SIZE, Sprite.SCALED_SIZE);\r\n    }\r\n\r\n    public boolean isCollision(Entity entity) {\r\n        if (entity == null) {\r\n            return false;\r\n        } else {\r\n            return this.getBoundary().intersects(entity.getBoundary());\r\n        }\r\n    }\r\n\r\n    public abstract void update();\r\n\r\n    public void render(GraphicsContext gc) {\r\n        gc.drawImage(img, x, y);\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/Entity.java b/src/entities/Entity.java
--- a/src/entities/Entity.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/Entity.java	(date 1665158997984)
@@ -10,7 +10,8 @@
 import constants.Constants;
 
 public abstract class Entity {
-    protected static Map gameMap;
+    // Lưu ý: Phải setGameMap ở bên ngoài (không thể construct trực tiếp).
+    protected Map gameMap = new Map();
     //Tọa độ X tính từ góc trái trên trong Canvas
     protected double x;
     //Tọa độ Y tính từ góc trái trên trong Canvas
@@ -21,6 +22,9 @@
     protected Sprite sprite;
     protected Image img;
     protected boolean canBlock = false;
+    public boolean isBomber = false;
+
+    public Entity() {}
 
     //Khởi tạo đối tượng, chuyển từ tọa độ đơn vị sang tọa độ trong canvas
     public Entity(double xUnit, double yUnit, Sprite sprite) {
@@ -32,6 +36,10 @@
         this.img = sprite.getFxImage();
     }
 
+    public void setGameMap(Map gameMap) {
+        this.gameMap = gameMap;
+    }
+
     public double getX() {
         return x;
     }
@@ -40,6 +48,14 @@
         return y;
     }
 
+    public int getxUnit() {
+        return xUnit;
+    }
+
+    public int getyUnit() {
+        return yUnit;
+    }
+
     public Sprite getSprite() {
         return sprite;
     }
Index: src/tracing/DirectedTracing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tracing/DirectedTracing.java b/src/tracing/DirectedTracing.java
new file mode 100644
--- /dev/null	(date 1665159930164)
+++ b/src/tracing/DirectedTracing.java	(date 1665159930164)
@@ -0,0 +1,68 @@
+package tracing;
+
+import constants.Constants.DIRECTION;
+import entities.animate.mob.Bomber;
+import entities.animate.mob.enemy.Enemy;
+
+public class DirectedTracing extends Tracing {
+    Bomber bomber;
+    Enemy enemy;
+
+    public void setBomber(Bomber bomber) {
+        this.bomber = bomber;
+    }
+
+    public DirectedTracing(Enemy enemy) {
+        this.enemy = enemy;
+    }
+
+    public DirectedTracing(Bomber bomber, Enemy enemy) {
+        this.bomber = bomber;
+        this.enemy = enemy;
+    }
+
+    public DIRECTION calculateDirection() {
+        if (bomber == null) {
+            return DIRECTION.NONE;
+        }
+
+        int vertical = random.nextInt(2);
+
+        if(vertical == 1) {
+            DIRECTION v = calculateRowDirection();
+            if (v != DIRECTION.NONE) {
+                return v;
+            } else {
+                return calculateColDirection();
+            }
+        } else {
+            DIRECTION h = calculateColDirection();
+
+            if (h != DIRECTION.NONE) {
+                return h;
+            } else {
+                return calculateRowDirection();
+            }
+        }
+    }
+
+    protected DIRECTION calculateColDirection() {
+        if(bomber.getxUnit() < enemy.getxUnit()) {
+            return DIRECTION.LEFT;
+        } else if (bomber.getxUnit() > enemy.getxUnit()) {
+            return DIRECTION.RIGHT;
+        } else {
+            return DIRECTION.NONE;
+        }
+    }
+
+    protected DIRECTION calculateRowDirection() {
+        if(bomber.getyUnit() < enemy.getyUnit()) {
+            return DIRECTION.UP;
+        } else if(bomber.getyUnit() > enemy.getyUnit()) {
+            return DIRECTION.DOWN;
+        } else {
+            return DIRECTION.NONE;
+        }
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4586ab7b-5012-49d7-b10b-d5920c390890\" name=\"Changes\" comment=\"Walls and bricks now can block enemy\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/support/Unit.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_base_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_base_win_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_controls_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_controls_win_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_fxml_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_fxml_win_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_graphics_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_15.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/entities/Entity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/entities/Entity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/entities/animate/mob/Bomber.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/entities/animate/mob/Bomber.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/entities/animate/mob/Mob.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/entities/animate/mob/Mob.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/entities/animate/mob/enemy/Enemy.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/entities/animate/mob/enemy/Enemy.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/tracing/RandomTracing.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/tracing/RandomTracing.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/constants/Constants$DIRECTION.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/constants/Constants$DIRECTION.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/constants/Constants$KEYBOARD.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/constants/Constants$KEYBOARD.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/constants/Constants.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/constants/Constants.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/entities/Entity.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/entities/Entity.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/Bomber.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/Bomber.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/Mob.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/Mob.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Balloon.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Balloon.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Enemy.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Enemy.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Oneal.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Oneal.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/input/KeyBoardInput$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/input/KeyBoardInput$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/input/KeyBoardInput$2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/input/KeyBoardInput$2.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/input/KeyBoardInput.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/input/KeyBoardInput.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/map/Map.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/map/Map.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/tracing/RandomTracing.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/tracing/RandomTracing.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/tracing/Tracing.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/tracing/Tracing.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Fc9sU2svLIRvDXarBmwi0GOklC\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"last_opened_file_path\": \"D:/Bomberman-OOP_N4_BTL_N9-\",\r\n    \"project.structure.last.edited\": \"SDKs\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"BombermanGame\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"BombermanGame\" />\r\n      <module name=\"bomberman\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"Bomberman-OOP_N4_BTL_N9-\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"Bomberman-OOP_N4_BTL_N9-\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.BombermanGame\" />\r\n        <item itemvalue=\"Application.BombermanGame\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4586ab7b-5012-49d7-b10b-d5920c390890\" name=\"Changes\" comment=\"\" />\r\n      <created>1664780711722</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1664780711722</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Walls and bricks now can block enemy\">\r\n      <created>1664780928472</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1664780928473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Walls and bricks now can block enemy\">\r\n      <created>1664783078454</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1664783078454</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"Zero_branch_2\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Walls and bricks now can block enemy\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Walls and bricks now can block enemy\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\r\n          <url>file://$PROJECT_DIR$/src/entities/animate/mob/enemy/Enemy.java</url>\r\n          <line>61</line>\r\n          <properties class=\"entities.animate.mob.enemy.Enemy\" method=\"setDirection\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/.idea/workspace.xml	(date 1665160058387)
@@ -4,34 +4,32 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4586ab7b-5012-49d7-b10b-d5920c390890" name="Changes" comment="Walls and bricks now can block enemy">
-      <change afterPath="$PROJECT_DIR$/src/support/Unit.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_base_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_base_win_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_controls_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_controls_win_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_fxml_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_fxml_win_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_graphics_15.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_15.xml" beforeDir="false" />
+    <list default="true" id="4586ab7b-5012-49d7-b10b-d5920c390890" name="Changes" comment="Enemy now move truely random">
+      <change afterPath="$PROJECT_DIR$/src/tracing/DirectedTracing.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/entities/Entity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/Entity.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entities/animate/AnimateEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/animate/AnimateEntity.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/entities/animate/mob/Bomber.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/animate/mob/Bomber.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/entities/animate/mob/Mob.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/animate/mob/Mob.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entities/animate/mob/enemy/Balloon.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/animate/mob/enemy/Balloon.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/entities/animate/mob/enemy/Enemy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/animate/mob/enemy/Enemy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entities/animate/mob/enemy/Oneal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entities/animate/mob/enemy/Oneal.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/factory/AnimateFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/factory/AnimateFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/map/Map.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/map/Map.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/tracing/RandomTracing.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/tracing/RandomTracing.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/constants/Constants$DIRECTION.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/constants/Constants$DIRECTION.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/constants/Constants$KEYBOARD.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/constants/Constants$KEYBOARD.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/constants/Constants.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/constants/Constants.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/tracing/Tracing.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/tracing/Tracing.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/entities/Entity.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/Entity.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/entities/animate/AnimateEntity.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/animate/AnimateEntity.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/entities/animate/mob/Bomber.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/animate/mob/Bomber.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/entities/animate/mob/Mob.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/animate/mob/Mob.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Balloon.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Balloon.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Enemy.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Enemy.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Oneal.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/animate/mob/enemy/Oneal.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/input/KeyBoardInput$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/input/KeyBoardInput$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/input/KeyBoardInput$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/input/KeyBoardInput$2.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/input/KeyBoardInput.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/input/KeyBoardInput.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/entities/still/Brick.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/still/Brick.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/entities/still/Grass.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/still/Grass.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/entities/still/StillObject.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/still/StillObject.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/entities/still/Wall.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/entities/still/Wall.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/factory/AnimateFactory.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/factory/AnimateFactory.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/map/Map.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/map/Map.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/tracing/RandomTracing.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/tracing/RandomTracing.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/tracing/Tracing.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/tracing/Tracing.class" afterDir="false" />
@@ -73,16 +71,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "last_opened_file_path": "D:/Bomberman-OOP_N4_BTL_N9-",
-    "project.structure.last.edited": "SDKs",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/Bomberman-OOP_N4_BTL_N9-&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="BombermanGame" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="BombermanGame" />
@@ -134,7 +132,14 @@
       <option name="project" value="LOCAL" />
       <updated>1664783078454</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Enemy now move truely random">
+      <created>1665152954798</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1665152954798</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -162,21 +167,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Walls and bricks now can block enemy" />
-    <option name="LAST_COMMIT_MESSAGE" value="Walls and bricks now can block enemy" />
-  </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/src/entities/animate/mob/enemy/Enemy.java</url>
-          <line>61</line>
-          <properties class="entities.animate.mob.enemy.Enemy" method="setDirection">
-            <option name="EMULATED" value="true" />
-            <option name="WATCH_EXIT" value="false" />
-          </properties>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
+    <MESSAGE value="Enemy now move truely random" />
+    <option name="LAST_COMMIT_MESSAGE" value="Enemy now move truely random" />
   </component>
 </project>
\ No newline at end of file
Index: src/entities/animate/mob/enemy/Balloon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities.animate.mob.enemy;\r\n\r\nimport entities.animate.AnimateEntity;\r\nimport entities.animate.mob.Mob;\r\nimport graphics.Sprite;\r\nimport javafx.scene.image.Image;\r\n\r\npublic class Balloon extends Enemy {\r\n    public Balloon(double x, double y, Sprite sprite) {\r\n        super(x, y, sprite);\r\n    }\r\n\r\n    @Override\r\n    public void chooseSprite() {\r\n        switch (direction) {\r\n            case UP:\r\n            case RIGHT:\r\n                sprite = Sprite.movingSprite(Sprite.balloom_right[0], Sprite.balloom_right[1],\r\n                        Sprite.balloom_right[2], animate, 60);\r\n                img = sprite.getFxImage();\r\n                break;\r\n            case DOWN:\r\n            case LEFT:\r\n                sprite = Sprite.movingSprite(Sprite.balloom_left[0], Sprite.balloom_left[1],\r\n                        Sprite.balloom_left[2], animate, 60);\r\n                img = sprite.getFxImage();\r\n                break;\r\n            case NONE:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/animate/mob/enemy/Balloon.java b/src/entities/animate/mob/enemy/Balloon.java
--- a/src/entities/animate/mob/enemy/Balloon.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/entities/animate/mob/enemy/Balloon.java	(date 1665157898239)
@@ -1,15 +1,90 @@
 package entities.animate.mob.enemy;
 
+import constants.Constants;
 import entities.animate.AnimateEntity;
 import entities.animate.mob.Mob;
 import graphics.Sprite;
 import javafx.scene.image.Image;
+import map.Map;
+import tracing.RandomTracing;
 
 public class Balloon extends Enemy {
+    public RandomTracing tracing = new RandomTracing();
+
     public Balloon(double x, double y, Sprite sprite) {
         super(x, y, sprite);
     }
 
+    /**
+     * Dựa vào tracing để xác định ví trí di chuyển
+     * Dựa theo direction để thay đổi tọa độ
+     */
+    @Override
+    protected void calculateMove() {
+        if (tracing.timeEachDirection >= tracing.TIME_EACH_DIRECTION_MAX
+                && isCanChangeDirection()) {
+            direction = tracing.calculateDirection();
+            tracing.timeEachDirection = 0;
+        } else {
+            // If the enemy hit the wall, change it direction.
+            if (!moving) {
+                direction = tracing.calculateDirection();
+            }
+            tracing.timeEachDirection++;
+        }
+        // Call parent's method
+        super.calculateMove();
+    }
+
+    @Override
+    public void setDirection() {
+        if (!isCanChangeDirection()) {
+            return;
+        }
+
+        int randomNumber = tracing.random.nextInt();
+
+        if (randomNumber % 4 == 0) {
+            direction = tracing.calculateDirection();
+        }
+
+        // Depend on direction determine if it can still move:
+        moving = true;
+        switch (direction) {
+            case UP:
+                if (Map.isCanStepOn(xUnit, yUnit - 1)) {
+                    yUnit--;
+                } else {
+                    moving = false;
+                }
+                break;
+            case DOWN:
+                if (Map.isCanStepOn(xUnit, yUnit + 1)) {
+                    yUnit++;
+                } else {
+                    moving = false;
+                }
+                break;
+            case LEFT:
+                if (Map.isCanStepOn(xUnit - 1, yUnit)) {
+                    xUnit--;
+                } else {
+                    moving = false;
+                }
+                break;
+            case RIGHT:
+                if (Map.isCanStepOn(xUnit + 1, yUnit)) {
+                    xUnit++;
+                } else {
+                    moving = false;
+                }
+                break;
+            default:
+                moving = false;
+                break;
+        }
+    }
+
     @Override
     public void chooseSprite() {
         switch (direction) {
Index: src/factory/AnimateFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package factory;\r\n\r\nimport entities.Entity;\r\nimport entities.animate.mob.Bomber;\r\nimport entities.animate.mob.enemy.Balloon;\r\nimport entities.animate.mob.enemy.Oneal;\r\nimport graphics.Sprite;\r\n\r\npublic class AnimateFactory {\r\n    public static Entity getAnimateEntity(int i, int j, char c) {\r\n        switch (c) {\r\n            case 'p':\r\n                return new Bomber(j, i, Sprite.player_right[0]);\r\n            case '1':\r\n                return new Balloon(j, i, Sprite.balloom_left[0]);\r\n            case '2':\r\n                return new Oneal(j, i, Sprite.oneal_left[0]);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/factory/AnimateFactory.java b/src/factory/AnimateFactory.java
--- a/src/factory/AnimateFactory.java	(revision bfcccbf8264cf528f34751f04ae97ace7d87ced9)
+++ b/src/factory/AnimateFactory.java	(date 1665157697195)
@@ -5,6 +5,7 @@
 import entities.animate.mob.enemy.Balloon;
 import entities.animate.mob.enemy.Oneal;
 import graphics.Sprite;
+import map.Map;
 
 public class AnimateFactory {
     public static Entity getAnimateEntity(int i, int j, char c) {
